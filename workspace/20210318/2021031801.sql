--함수 문제
--다음과 같이 출력하시오
-- 상품코드, 상품명, 대분류코드, 대분류명
--함수를 사용. 함수명은 FN_PRODNM
CREATE OR REPLACE FUNCTION FN_PRODNM(P_LGU IN PROD.PROD_LGU%TYPE)
RETURN VARCHAR2
IS 
    V_NM VARCHAR2(40);
BEGIN
    SELECT LPROD_NM
      INTO V_NM
      FROM LPROD
     WHERE LPROD_GU = P_LGU;
     RETURN V_NM;
END;

SELECT PROD_ID 상품코드,
       PROD_NAME 상품명,
       PROD_LGU 대분류코드,
       FN_PRODNM(PROD_LGU) 대분류명
  FROM PROD
 ORDER BY 1; 
 
--함수문제2
--다음과 같이 출력하시오
--장바구니코드, 상품코드, 판매개수, 회원아이디, 회원명
--함수를 사용 함수명은 FN_GET_MEM_NM

CREATE OR REPLACE FUNCTION FN_GET_MEM_NM(P_ID IN MEMBER.MEM_ID%TYPE)
RETURN VARCHAR2
IS
    V_NAME MEMBER.MEM_NAME%TYPE;
BEGIN
    SELECT MEM_NAME
      INTO V_NAME
      FROM MEMBER
     WHERE MEM_ID = P_ID;
     RETURN V_NAME;
END;

SELECT CART_NO 장바구니코드,
       CART_PROD 상품코드,
       CART_QTY 판매개수,
       FN_GET_MEM_NM(CART_MEMBER) 회원이름
  FROM CART
 ORDER BY 1; 
 
--함수문제3
--다음과 같이 출력하시오
-- 함수를 사용 .함수명은
CREATE OR REPLACE FUNCTION FN_GET_CITY(P_ADD IN MEMBER.MEM_ADD1%TYPE)
RETURN VARCHAR2
IS
    V_CITY MEMBER.MEM_ADD1%TYPE;
BEGIN
    SELECT NVL(SUBSTR(P_ADD,1,INSTR(P_ADD,' ')-1),SUBSTR(P_ADD,1,2))
      INTO V_CITY
      FROM DUAL;
    RETURN V_CITY;  
END;

SELECT MEM_ID,
       MEM_NAME,
       FN_GET_CITY(MEM_ADD1)
  FROM MEMBER;     

--함수 문제4 
--상품분류 별 총판매금액(SUM(PROD_SALE * CART_QTY))을 출력
CREATE OR REPLACE FUNCTION ALL_SALE_AMT(P_LGU IN LPROD.LPROD_GU%TYPE,
                                        P_YEAR IN NUMBER)
RETURN NUMBER
IS
    V_NUM NUMBER;
BEGIN
    SELECT SUM(A.PROD_SALE * B.CART_QTY)
      INTO V_NUM
      FROM PROD A, CART B
     WHERE PROD_ID = CART_PROD
       AND A.PROD_LGU = P_LGU
       AND B.CART_NO LIKE P_YEAR||'%';
    RETURN V_NUM;   
END;




SELECT LPROD_GU 상품분류코드,
       LPROD_NM 상품분류명,
       NVL(ALL_SALE_AMT(LPROD_GU, 2005),0) 총판매금액
  FROM LPROD;



CREATE OR REPLACE TRIGGER TG_LPROD_IN
AFTER INSERT
ON LPROD
BEGIN
    --LPROD 테이블에 데이터가 INSERT(이벤트)된 후(타이밍)에
    --다음과 같은 문자열을 콘솔에 출력함
    DBMS_OUTPUT.PUT_LINE('상품분류가 추가되었습니다.');
END;

SET SERVEROUTPUT ON;

INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
VALUES(22,'P212','테스트2');

CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    EMPNAME VARCHAR2(45),
    EMPJOB VARCHAR2(60)
);

CREATE TABLE SAL01(
    SALNO NUMBER(4) PRIMARY KEY,
    SAL NUMBER(7,2),
    EMPNO NUMBER(4) REFERENCES EMP01(EMPNO)
);

CREATE SEQUENCE SAL01_SALNO_SEQ
INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER TRG_02
--EMP01테이블에 데이터가 INSERT(이벤트)EHLS
--후(AFTER 타이밍)에
AFTER INSERT
ON EMP01
--행라벨트리거 -> 여러건 처리 가능
FOR EACH ROW
BEGIN
    --급여테이블에도 자동으로 데이터를 INSERT.
    --:NEW => EMP01에 방금 INSERT된 바로 그 따끈한 그 행
    --.EMPNO => 그 행의 EMPNO 컬럼의 값
    INSERT INTO SAL01 VALUES(SAL01_SALNO_SEQ.NEXTVAL, 100, :NEW.EMPNO);
END;    

INSERT INTO EMP01 VALUES(1,'개똥이','프로그래머');
INSERT INTO EMP01 VALUES(2,'박명수','프로그래머');
INSERT INTO EMP01 VALUES(3,'윤종신','프로그래머');
INSERT INTO EMP01 VALUES(4,'하하','프로그래머');
INSERT INTO EMP01 VALUES(5,'메뚜기','프로그래머');

SELECT * FROM EMP01;
SELECT * FROM SAL01;


  
 
 
 
 
 
 
 
 
 
 
 
 
 
 